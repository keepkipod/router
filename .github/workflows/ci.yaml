name: CI

on:
  push:
    # branches-ignore:
    #   - main  # Prevent direct pushes to main
    paths:
      - 'router/**'
      - 'k8s/**'
      - '.github/workflows/ci.yaml'

  pull_request:
    branches:
      - main
    paths:
      - 'router/**'
      - 'k8s/**'
      - '.github/workflows/ci.yaml'

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  PYTHON_VERSION: '3.13'

jobs:
  version:
    name: Calculate Version
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      version_tag: ${{ steps.version.outputs.version_tag }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Required for version calculation

      - name: Get latest tag
        id: latest_tag
        run: |
          # Get the latest tag, or use 0.0.0 if no tags exist
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

      - name: Calculate semantic version
        id: version
        uses: paulhatch/semantic-version@v5.4.0
        with:
          # The prefix to use to identify tags
          tag_prefix: "v"
          # A string which, if present in a git commit, indicates that a change represents a
          # major (breaking) change
          major_pattern: "(MAJOR)"
          # Same as above except indicating a minor change
          minor_pattern: "(MINOR)"
          # A string to determine the format of the version output
          version_format: "${major}.${minor}.${patch}"
          # If this is set to true, *every* commit will be treated as a new version.
          bump_each_commit: true
          # If true, the body of commits will also be searched for major/minor patterns to determine the version type.
          search_commit_body: false
      
      - name: Ensure version exists
        id: final_version
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          VERSION_TAG="${{ steps.version.outputs.version_tag }}"
          
          # If version is empty, create one based on current date and run number
          if [ -z "$VERSION" ]; then
            echo "No version from semantic-version, creating one..."
            VERSION="0.1.${{ github.run_number }}"
            VERSION_TAG="v$VERSION"
          fi
          
          echo "Final version: $VERSION"
          echo "Final version tag: $VERSION_TAG"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_tag=$VERSION_TAG" >> $GITHUB_OUTPUT

  lint-and-test:
    name: Lint and Test
    runs-on: ubuntu-latest
    needs: version
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Cache pip packages
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('router/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          cd router
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

    #   - name: Run linting
    #     run: |
    #       cd router
    #       # Run black formatter check
    #       black --check --diff src/
          
    #       # Run flake8 linter
    #       flake8 src/ --count --statistics
          
    #       # Run mypy type checker
    #       mypy src/ --ignore-missing-imports

    #   - name: Run tests
    #     run: |
    #       cd router
    #       PYTHONPATH=src pytest tests/ -v
          
    #       # TODO: With more time, would implement:
    #       # - Code coverage with pytest-cov and Codecov integration
    #       # - Integration tests with real NGINX containers
    #       # - Performance tests with locust or similar

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: lint-and-test
    permissions:
      contents: read
      packages: write
      pull-requests: write  # For PR comments
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Container Registry
        # Only login for branch pushes, not PRs
        if: github.event_name == 'push'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            # For PRs: pr-<number>
            type=ref,event=pr
            # For branches: branch-<name>-<sha>
            type=ref,event=branch,suffix=-{{sha}}
            # For any branch push: also add clean branch name
            type=ref,event=branch

      - name: Build and push Docker image
        id: docker-build
        uses: docker/build-push-action@v5
        with:
          context: ./router
          # Push only for branch pushes, not for PRs
          push: ${{ github.event_name == 'push' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Add PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const output = `### üê≥ Docker Build Successful
            
            **Version:** \`${{ needs.version.outputs.version }}\`
            
            This PR build completed successfully but images were **not pushed** to the registry.
            When merged, this will be released as version \`${{ needs.version.outputs.version }}\`.
            
            <details>
            <summary>Build Details</summary>
            
            - **Commit:** ${{ github.sha }}
            - **Builder:** @${{ github.actor }}
            - **Workflow:** [Run #${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            </details>`;
            
            // Find existing comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('Docker Build Successful')
            );
            
            // Update or create comment
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: output
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: output
              });
            }

      - name: Development build summary
        if: github.event_name == 'push'
        run: |
          BRANCH_NAME=${GITHUB_REF#refs/heads/}
          echo "## üöÄ Development Build Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** \`${BRANCH_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** \`${{ needs.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "**Images:**" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version_tag }}\`" >> $GITHUB_STEP_SUMMARY
          echo "- \`${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${BRANCH_NAME}\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Test this image:" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`bash" >> $GITHUB_STEP_SUMMARY
          echo "docker run --rm -p 8000:8000 ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Version Details:" >> $GITHUB_STEP_SUMMARY
          echo "- Major: ${{ needs.version.outputs.major }}" >> $GITHUB_STEP_SUMMARY
          echo "- Minor: ${{ needs.version.outputs.minor }}" >> $GITHUB_STEP_SUMMARY
          echo "- Patch: ${{ needs.version.outputs.patch }}" >> $GITHUB_STEP_SUMMARY

  # TODO: Additional jobs that would be implemented with more time:
  # 
  # security-scan:
  #   - Container vulnerability scanning with Trivy
  #   - Dependency scanning with Dependabot
  #   - Secret scanning
  #
  # integration-test:
  #   - Spin up Kind cluster
  #   - Deploy full stack with ArgoCD
  #   - Run end-to-end tests
  #   - Load testing with k6 or locust
  #
  # notify:
  #   - Slack/Teams notifications on failure
  #   - PR comment with build details
  #   - Update deployment tracking system