version: '3'

vars:
  CLUSTER_NAME: abc
  APP_NAME: router
  APP_NAMESPACE: router
  ARGOCD_VERSION: v2.9.3

tasks:
  deploy-cluster:
    cmds:
      - kind create cluster --name {{.CLUSTER_NAME}} --config ./kind-config.yaml

  wait-for-cluster:
    cmds:
      - kubectl wait --for=condition=ready node --all --timeout=300s

  install-argocd-cli:
    cmds:
      - |
        if ! command -v argocd &> /dev/null; then
          echo "Installing ArgoCD CLI..."
          curl -sSL -o /tmp/argocd https://github.com/argoproj/argo-cd/releases/download/{{.ARGOCD_VERSION}}/argocd-linux-amd64
          chmod +x /tmp/argocd
          sudo mv /tmp/argocd /usr/local/bin/argocd
        else
          echo "ArgoCD CLI is already installed"
        fi

  deploy-argocd:
    cmds:
      - echo "Installing ArgoCD..."
      - kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
      - helm repo add argo https://argoproj.github.io/argo-helm
      - helm repo update
      - helm upgrade --install argocd argo/argo-cd --namespace argocd --values ./k8s/argocd/argocd-values.yaml --wait
      - echo "Waiting for ArgoCD to be ready..."
      - kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=argocd-server -n argocd --timeout=300s

  get-argocd-password:
    cmds:
      - echo "ArgoCD admin password:"
      - kubectl -n argocd get secret argocd-initial-admin-secret -o jsonpath="{.data.password}" | base64 -d
      - echo ""

  port-forward-argocd:
    cmds:
      - echo "Port forwarding to ArgoCD..."
      - echo "ArgoCD UI will be available at http://localhost:8081"
      - echo "Username = admin"
      - task: get-argocd-password
      - echo ""
      - echo "Press Ctrl+C to stop port forwarding"
      - kubectl port-forward svc/argocd-server -n argocd 8081:80

  bootstrap-apps:
    cmds:
      - echo "Bootstrapping applications with ArgoCD..."
      - kubectl apply -f ./k8s/argocd/app-of-apps.yaml
      - echo "Applications are being deployed. Check ArgoCD UI for status."

  sync-all-apps:
    cmds:
      - argocd app sync app-of-apps --grpc-web --insecure --server localhost:8081
      - argocd app sync -l argocd.argoproj.io/instance=app-of-apps --grpc-web --insecure --server localhost:8081

  get-apps-status:
    cmds:
      - kubectl get applications -n argocd
      - echo ""
      - argocd app list --grpc-web --insecure --server localhost:8081 || echo "Make sure ArgoCD is port-forwarded on port 8081"

  build-app:
    cmds:
      - docker build -t {{.APP_NAME}}:6.0.0 ./router
      - kind load docker-image {{.APP_NAME}}:6.0.0 --name {{.CLUSTER_NAME}}

  deploy-app:
    cmds:
      - helm upgrade --install {{.APP_NAME}} ./k8s/router --create-namespace --namespace {{.APP_NAMESPACE}}
      - kubectl rollout status deployment/{{.APP_NAME}} --namespace {{.APP_NAMESPACE}} --timeout=3m

  wait-for-app:
    cmds:
      - echo "Waiting for application to be fully ready..."
      - kubectl wait --for=condition=available deployment/{{.APP_NAME}} --namespace {{.APP_NAMESPACE}} --timeout=60s
      - sleep 10

  port-forward-app:
    cmds:
      - echo "Port forwarding to application..."
      - echo "Application will be available at http://localhost:5000"
      - echo "Press Ctrl+C to stop port forwarding"
      - kubectl -n {{.APP_NAMESPACE}} port-forward svc/{{.APP_NAME}} 5000:5000

  port-forward-bg:
    cmds:
      - kubectl -n {{.APP_NAMESPACE}} port-forward svc/{{.APP_NAME}} 5000:5000 &
      - sleep 5

  status:
    cmds:
      - echo "=== Cluster Status ==="
      - kubectl get nodes
      - echo ""
      - echo "=== ArgoCD Applications ==="
      - kubectl get applications -n argocd
      - echo ""
      - echo "=== All Namespaces ==="
      - kubectl get namespaces
      - echo ""
      - echo "=== Application Pods ==="
      - kubectl get pods -n {{.APP_NAMESPACE}}
      - echo ""
      - echo "=== Services ==="
      - kubectl get svc -A

  logs:
    cmds:
      - kubectl logs -n {{.APP_NAMESPACE}} deployment/{{.APP_NAME}} -f

  uninstall-app:
    cmds:
      - helm uninstall {{.APP_NAME}} -n {{.APP_NAMESPACE}} || true

  clean:
    cmds:
      - kind delete cluster --name {{.CLUSTER_NAME}}

  deploy-all-argocd:
    cmds:
      - task: deploy-cluster
      - task: wait-for-cluster
      - task: build-app
      - task: install-argocd-cli
      - task: deploy-argocd
      - task: bootstrap-apps
      - task: print-helper-argocd

  # Original deployment flow (without ArgoCD)
  deploy-all:
    cmds:
      - task: deploy-cluster
      - task: wait-for-cluster
      - task: build-app
      - task: deploy-app
      - task: wait-for-app
      - task: print-helper

  print-helper-argocd:
    cmds:
      - echo "====================================="
      - echo "ArgoCD deployment completed!"
      - echo "====================================="
      - echo ""
      - echo "To access ArgoCD UI:"
      - echo "  task port-forward-argocd"
      - echo ""
      - echo "To check application status:"
      - echo "  task get-apps-status"
      - echo ""
      - echo "To sync all applications:"
      - echo "  task sync-all-apps"
      - echo ""
      - echo "To view overall status:"
      - echo "  task status"
      - echo "====================================="

  print-helper:
    cmds:
      - echo "====================================="
      - echo "Deployment completed!"
      - echo "====================================="
      - echo ""
      - echo "To access the application:"
      - echo "  task port-forward-app"
      - echo ""
      - echo "To view logs:"
      - echo "  task logs"
      - echo ""
      - echo "To check status:"
      - echo "  task status"
      - echo "====================================="

  port-forward-ingress-bg:
    cmds:
      - kubectl -n ingress-nginx port-forward svc/ingress-nginx-controller 8080:80 &
      - sleep 5

  get-ingress-info:
    cmds:
      - echo "=== Ingress Status ==="
      - kubectl get ingress -n {{.APP_NAMESPACE}}
      - echo ""
      - echo "=== Ingress Details ==="
      - kubectl describe ingress -n {{.APP_NAMESPACE}} || echo "No ingress found"
      - echo ""
      - echo "=== NodePort for ingress-nginx ==="
      - kubectl get svc -n ingress-nginx

  port-forward-ingress:
    cmds:
      - echo "Port forwarding to ingress controller..."
      - echo "Application will be available at http://localhost:8080"
      - echo "Press Ctrl+C to stop port forwarding"
      - kubectl -n ingress-nginx port-forward svc/ingress-nginx-controller 8080:80

  deploy-ingress-manually:
    cmds:
      - helm upgrade --install ingress-nginx ingress-nginx/ingress-nginx --create-namespace --namespace ingress-nginx -f k8s/ingress-nginx/values.yaml

  # Quick check of app status
  check-apps:
    desc: "Quick check of all applications"
    cmds:
      - kubectl get applications -n argocd

  # Force sync if needed
  force-sync:
    desc: "Force sync all applications"
    cmds:
      - kubectl patch application app-of-apps -n argocd --type merge -p '{"metadata":{"annotations":{"argocd.argoproj.io/refresh":"true"}}}'
      - sleep 2
      - kubectl get applications -n argocd

  # Check for sync issues
  check-sync-issues:
    desc: "Check for applications with sync issues"
    cmds:
      - |
        echo "=== Applications with sync issues ==="
        kubectl get applications -n argocd --no-headers | grep -v "Synced" || echo "All applications synced!"

  # Simple restart of ArgoCD if having issues
  restart-argocd:
    desc: "Restart ArgoCD components"
    cmds:
      - kubectl rollout restart deployment -n argocd
      - kubectl rollout status deployment -n argocd

  # Check logs for errors
  check-argocd-logs:
    desc: "Check ArgoCD logs for errors"
    cmds:
      - |
        echo "=== Recent ArgoCD Controller Errors ==="
        kubectl logs -n argocd deployment/argocd-application-controller --tail=50 | grep -i error || echo "No errors found"

  # Simple deployment with build
  deploy-with-build:
    desc: "Deploy everything including building router image"
    cmds:
      - task: deploy-cluster
      - task: wait-for-cluster
      - task: install-argocd-cli
      - task: deploy-argocd
      - task: build-app
      - task: bootstrap-apps
      - echo "Deployment complete! Use 'task port-forward-argocd' to access ArgoCD UI"

  # Troubleshooting helper
  troubleshoot:
    desc: "Run basic troubleshooting checks"
    cmds:
      - echo "=== Cluster Nodes ==="
      - kubectl get nodes
      - echo ""
      - echo "=== ArgoCD Applications ==="
      - kubectl get applications -n argocd
      - echo ""
      - echo "=== Pods by Namespace ==="
      - kubectl get pods -A --field-selector=status.phase!=Running,status.phase!=Succeeded
      - echo ""
      - echo "=== Recent Events ==="
      - kubectl get events -A --sort-by='.lastTimestamp' | tail -20

  setup-colima-k3s:
    desc: "Setup Colima with k3s (no Kind)"
    cmds:
      - |
        echo "Setting up Colima with k3s..."
        colima stop || true
        colima start --cpu 6 --memory 12 --kubernetes --arch aarch64
        kubectl config use-context colima
        kubectl get nodes

  deploy-to-k3s:
    desc: "Deploy directly to Colima k3s"
    cmds:
      - kubectl config use-context colima
      - task: install-argocd-cli
      - |
        echo "Installing ArgoCD on k3s..."
        kubectl create namespace argocd --dry-run=client -o yaml | kubectl apply -f -
        helm repo add argo https://argoproj.github.io/argo-helm
        helm repo update
        helm upgrade --install argocd argo/argo-cd \
          --namespace argocd \
          --values ./k8s/argocd/argocd-values-minimal.yaml \
          --wait
      - task: build-app-k3s
      - task: bootstrap-apps

  build-app-k3s:
    desc: "Build app for k3s"
    cmds:
      - docker build -t {{.APP_NAME}}:latest ./router


  redeploy-monitoring:
    desc: "Completely remove and redeploy monitoring stack"
    cmds:
      - echo "=== Redeploying Monitoring Stack ==="
      - task: remove-monitoring
      - task: wait-for-removal
      - task: deploy-monitoring
      # - task: verify-monitoring

  remove-monitoring:
    desc: "Remove monitoring stack completely"
    cmds:
      - |
        echo "1. Disabling auto-sync for monitoring apps..."
        # Disable auto-sync to prevent ArgoCD from recreating resources
        kubectl patch application kube-prometheus-stack -n argocd --type merge -p '{"spec":{"syncPolicy":{"automated":null}}}' || true
        kubectl patch application custom-dashboards -n argocd --type merge -p '{"spec":{"syncPolicy":{"automated":null}}}' || true
        
        echo "2. Deleting ArgoCD applications..."
        kubectl delete application kube-prometheus-stack -n argocd --ignore-not-found=true
        kubectl delete application custom-dashboards -n argocd --ignore-not-found=true
        
        echo "3. Removing monitoring namespace (this removes all resources)..."
        kubectl delete namespace monitoring --ignore-not-found=true
        
        echo "4. Cleaning up any remaining CRDs..."
        kubectl delete crd prometheuses.monitoring.coreos.com --ignore-not-found=true
        kubectl delete crd prometheusrules.monitoring.coreos.com --ignore-not-found=true
        kubectl delete crd servicemonitors.monitoring.coreos.com --ignore-not-found=true
        kubectl delete crd podmonitors.monitoring.coreos.com --ignore-not-found=true
        kubectl delete crd alertmanagers.monitoring.coreos.com --ignore-not-found=true
        kubectl delete crd alertmanagerconfigs.monitoring.coreos.com --ignore-not-found=true
        kubectl delete crd probes.monitoring.coreos.com --ignore-not-found=true
        kubectl delete crd thanosrulers.monitoring.coreos.com --ignore-not-found=true

  wait-for-removal:
    desc: "Wait for monitoring namespace to be completely removed"
    cmds:
      - |
        echo "Waiting for monitoring namespace to be deleted..."
        while kubectl get namespace monitoring >/dev/null 2>&1; do
          echo -n "."
          sleep 2
        done
        echo " Done!"
        echo "Waiting additional 10s for cleanup to complete..."
        sleep 10

  deploy-monitoring:
    desc: "Deploy fresh monitoring stack"
    cmds:
      - |
        echo "1. Creating monitoring namespace..."
        kubectl create namespace monitoring --dry-run=client -o yaml | kubectl apply -f -
        
        echo "2. Re-applying monitoring applications..."
        # Apply kube-prometheus-stack
        kubectl apply -f k8s/argocd/applications/kube-prometheus-stack.yaml
        
        # Apply custom dashboards if exists
        if [ -f "k8s/argocd/applications/custom-dashboards.yaml" ]; then
          kubectl apply -f k8s/argocd/applications/custom-dashboards.yaml
        fi
        
        echo "3. Waiting for applications to be created..."
        sleep 5
        
        echo "4. Syncing applications..."
        argocd app sync kube-prometheus-stack --grpc-web --insecure --server localhost:8081 || \
          kubectl patch application kube-prometheus-stack -n argocd --type merge -p '{"operation":{"sync":{"revision":"HEAD"}}}'
        
        # If custom dashboards app exists, sync it too
        kubectl get application custom-dashboards -n argocd >/dev/null 2>&1 && \
          (argocd app sync custom-dashboards --grpc-web --insecure --server localhost:8081 || \
           kubectl patch application custom-dashboards -n argocd --type merge -p '{"operation":{"sync":{"revision":"HEAD"}}}')

  verify-monitoring:
    desc: "Verify monitoring stack is working"
    cmds:
      - |
        echo "Waiting for Prometheus pods..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=prometheus -n monitoring --timeout=300s || true
        
        echo "Waiting for Grafana pods..."
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=300s || true
        
        echo ""
        echo "=== Monitoring Stack Status ==="
        kubectl get pods -n monitoring
        echo ""
        kubectl get applications -n argocd | grep -E "prometheus|dashboard"
        echo ""
        echo "=== Grafana Dashboards Check ==="
        task: check-dashboards

  check-dashboards:
    desc: "Check if Grafana dashboards are loaded"
    cmds:
      - |
        # Port forward to Grafana
        kubectl port-forward -n monitoring svc/kube-prometheus-stack-grafana 3000:80 >/dev/null 2>&1 &
        PF_PID=$!
        sleep 5
        
        # Check dashboards via API
        echo "Dashboards in Grafana:"
        curl -s -u admin:admin http://localhost:3000/api/search?type=dash-db 2>/dev/null | \
          jq -r '.[] | "\(.title) (Folder: \(.folderTitle))"' || echo "Could not fetch dashboards"
        
        # Check if custom dashboards are present
        echo ""
        echo "Checking for custom dashboards:"
        curl -s -u admin:admin http://localhost:3000/api/search?type=dash-db 2>/dev/null | \
          jq -r '.[] | select(.title | contains("Router") or contains("NGINX") or contains("Golden")) | .title' || echo "No custom dashboards found"
        
        # Kill port forward
        kill $PF_PID 2>/dev/null || true

  quick-test-monitoring:
    desc: "Quick test of monitoring without full redeploy"
    cmds:
      - |
        echo "=== Quick Monitoring Test ==="
        # Just restart Grafana to reload dashboards
        kubectl rollout restart deployment -n monitoring -l app.kubernetes.io/name=grafana
        
        echo "Waiting for Grafana restart..."
        sleep 10
        kubectl wait --for=condition=ready pod -l app.kubernetes.io/name=grafana -n monitoring --timeout=120s
        
        # Check dashboards
        task: check-dashboards

  monitoring-logs:
    desc: "Show monitoring component logs"
    cmds:
      - |
        echo "=== Grafana Logs ==="
        kubectl logs -n monitoring -l app.kubernetes.io/name=grafana --tail=20
        echo ""
        echo "=== Grafana Sidecar Logs ==="
        kubectl logs -n monitoring -l app.kubernetes.io/name=grafana -c grafana-sc-dashboard --tail=20 || echo "No sidecar logs"

  fix-monitoring-sync:
    desc: "Fix monitoring sync issues"
    cmds:
      - |
        echo "Refreshing monitoring applications..."
        argocd app get kube-prometheus-stack --refresh --grpc-web --insecure --server localhost:8081 || true
        argocd app get custom-dashboards --refresh --grpc-web --insecure --server localhost:8081 || true
        
        echo "Hard refresh - deleting and recreating apps..."
        task: redeploy-monitoring